<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>INFO 4310 - HW2</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="stylesheet" type="text/css" href="../css/normalize.css">
    <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
    <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
    <link rel="stylesheet" href="../css/hljs-base16.css">
    <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
    
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>

    <!-- TODO
        1. Hover on legend filters

        제프씨 헬프 유얼투두 <3
        2. X Y Axis Label
        3. Text Alignment on panel
     -->
    <style>
        body {
            background-color: black;
            margin: 30px;
            margin-top: 30px;
        }

        .gridlines line {
            stroke: white;
        }

        .gridlines .domain {
            stroke: black;
        }
            
        #scatterplot {
            float: left;
        }
        
        #panel {
            height: 350px; 
            width: 400px; 
            float: left; 
            padding: 20 30 20 20;
        }

        #panel table {
            color: white;
            border-collapse: collapse;   
            width: 400px;
        }

        #panel th, td{
            padding-top: 5px;
            padding-bottom: 15px;
            padding-left: 20px;
            padding-right: 20px;
        }

        #panel tr{
            border-color: white;
            border: 1px solid;
           
        }
        
        #panel h5 {
            margin:0;
            padding:0;
        }
        
        #button-bar {
            display: inline-block;
            margin: 0 auto;
            justify-content: center;
        }

        #main {
            font-family: 'Open Sans', sans-serif;
            color: #00643c;
        }

        button {
            background-color: white;
            /* color: #00643c;
            border-color: #00643c; */
            margin: 4px;
            padding: 6px;
            cursor: pointer;
        }

        .tick {
            color: white;
        }

        #all {
            display: flex;
            flex-direction: row;
        }

        #graph_content {
            width: 830px;
            text-align: center;
        }

        .x_label {
            color: white;
        }

        #legend {
            color: white;
        }

        #legend .each_legend {
            display: inline-block;
            padding: none;
            font-size: 12px;
        }

        .right_side{
            flex-direction: column;
            color: white;
        }

        #slidecontainer {
            padding: 10px;
            width: 250px;
            margin-left: 20px;
            color: black;
            background-color: white;
        }

        #textInput {
            color: black;
            margin-left: 20px;
        }

        #caffeine_limit {
            display: flex;
        }

        .clicked {
            stroke: white;
            stroke-width: 5;
        }

        #slide_top {
            display: flex;
        }

        #clear_button {
            font-size: 22px;
            margin: 0 auto;
            height: 85px;
            width: 125px;
        }

        #clear {
            margin: 0 auto;
        }

    </style>
</head>
<body>
    <h1 id="main">Brewed for those who love coffee.</h1>
    <div id="all">
        <div id="graph_content">
            <div id="legend"></div>

            <svg id="scatterplot" height="550" width="800" style="float:left;">

            </svg>
            <div id="button-bar"></div>

            
        </div>
        <div class = "right_side">
            <div id="slide_top">
                <div id="slidecontainer" class="border border-light rounded">
                    <div id="caffeine_limit">
                        <p>Caffeine Limit:</p>
                        <p id="textInput" value="410">410 mg</p>
                    </div>

                    <div id = "slider">
                        <span>0</span>
                        <input type="range" value="410" min = "0" max = "410" id="myRange" >
                        <span>410 mg</span>
                    </div>    
                </div>

                <div id="clear">
                    <button id="clear_button" class="btn btn-outline-light">Clear All</button>
                </div>
            </div>

            <div id="panel"></div>
        </div>
    </div>

    <script>
        const scatter = d3.select("svg#scatterplot");
        const width = scatter.attr("width");
        const height = scatter.attr("height");
        const margin = {top: 15, right: 15, bottom: 40, left: 50};
        const chartWidth = width - margin.left - margin.right;
        const chartHeight = height - margin.top - margin.bottom;
    
        let annotations = scatter.append("g").attr("id","annotations");
        let chartArea = scatter.append("g").attr("id","points")
                        .attr("transform","translate("+margin.left+","+margin.top+")");    
    
        const loadScatter = async function() {
          let initial_data = await d3.csv("starbucks_drinkMenu_expanded.csv", d3.autoType );
          let data = [];
          let prep = new Set()
          prep.add("All")
          let check = new Set()
          let sizes = ["Short", "Tall", "Grande", "Venti", "Solo", "Doppio"]
          let categories = new Set()
        
          initial_data.forEach( d=> {
              data.push({
                  'Beverage': String(d['Beverage']),
                  'Beverage_category': String(d['Beverage_category']),
                  'Beverage_prep': String(d['Beverage_prep']),
                  'Caffeine (mg)': Number(d['Caffeine (mg)']),
                  'Calories': Number(d['Calories']),
                  'Calcium (% DV)': String(d[' Calcium (% DV) ']),
                  'Protein (g)': Number(d[' Protein (g) ']),
                  'Sodium (mg)': Number(d[' Sodium (mg)']),
                  'Sugars (g)': Number(d[' Sugars (g)']),
                  'Carbohydrates (g)': Number(d[' Total Carbohydrates (g) ']),
                  'Total_Fat (g)': Number(d[' Total Fat (g)'])
              })
              let size = String(d['Beverage_prep']).split(" ")[0]
              if (!sizes.includes(size) || String(d['Beverage_prep']) == "Grande Nonfat Milk") {
                prep.add(String(d['Beverage_prep']));
              }      
              categories.add(String(d['Beverage_category']));
          })
         
          let calorieExtent = d3.extent(data, d => d['Calories']);
          let calorieScale = d3.scaleLinear().domain(calorieExtent).range([chartHeight, 0]);
          let caffeineExtent = d3.extent(data, d => d['Caffeine (mg)']);
          let caffeineScale = d3.scaleLinear().domain(caffeineExtent).range([0, chartWidth]);
          let sugarExtent = d3.extent(data, d => d['Sugars (g)']);
          let sugarScale = d3.scaleLinear().domain(sugarExtent).range([0, chartWidth]);
          let categoryScale = d3.scaleOrdinal()
                                .domain(categories)
                                .range(["#469990", "#e6194b", "#ffe119", "#42d4f4", "#4363d8", "#911eb4", "#9a6324", "#808000", "#f58231"]);
          let leftAxis = d3.axisLeft(calorieScale).tickFormat(d3.format(""))
          let leftGridlines = d3.axisLeft(calorieScale)
                                .tickSize(-chartWidth-10)
                                .tickFormat("")
          let bottomAxis = d3.axisBottom(sugarScale)
                             .tickFormat(d3.format(""));
          let bottomGridlines = d3.axisBottom(sugarScale)
                                    .tickSize(-chartHeight-10)
                                    .tickFormat("")
    
            annotations.append("g")
                .attr("class", "y axis")
                .attr("transform",`translate(${margin.left-10},${margin.top})`)
                .call(leftAxis)
            annotations.append("g")
                .attr("class", "y gridlines")
                .attr("transform",`translate(${margin.left-10},${margin.top})`)
                .call(leftGridlines);
            annotations.append("g")
                .attr("class", "x axis")
                .attr("transform",`translate(${margin.left},${chartHeight+margin.top+10})`)
                .call(bottomAxis);
            annotations.append("g")
                .attr("class", "x gridlines")
                .attr("transform",`translate(${margin.left},${chartHeight+margin.top+10})`)
                .call(bottomGridlines);
            annotations.append("text")
                .attr("class", "x_label")
                .attr("x", chartWidth)
                .attr("y", chartHeight+60)
                .style("text-anchor", "middle")
                .text("Sugar");
            annotations.append("text")
                .attr("class", "y_label")
                .attr("x", 0)
                .attr("y", 0)
                .text("Calories (cal)");
            createCircles(data);


            // Credit to Professor Jeff
            let panelHeader = d3.select("#panel").append("h5");
            let table = d3.select("#panel").append("table");
            function updatePanel(row) {
                let rowCopy = Object.assign({},row);
                let title = rowCopy.title;
                delete rowCopy.title;
                panelHeader.text(title);
                let kvPairs = Object.entries(rowCopy);
                let rows = table.selectAll("tr").data(kvPairs)
                                .join( enter => enter.append("tr"),
                                        update => update.selectAll("td").remove(), 
                                        exit => exit.remove() );
                
                rows.append("td").append("strong").text( d => d[0] );
                rows.append("td").text( d => d[1] );
            }

            let selected_prep = ""
            
            prep.forEach( d => {
                d3.select("div#button-bar")
                .append("button")
                .attr("class", "btn btn-outline-light prep")
                .text( d )
                .on("click", function() {
                    console.log(d);
                    selected_prep = d;
                    updateCirclesAnimated( d , document.getElementById("myRange").value);
                })
            });

            // let preps = document.getElementsByClassName('prep');
            // for (let prep of preps) {
            //     prep.classList.remove('active')
            //     prep.onclick = event => {
            //         prep.classList.add('active')
            //     }
            // }

            function updateCirclesAnimated(prepKey, caffeine_threshold) {
                if (prepKey == "All") {
                    filtered_data = data.filter((d) => {return d['Caffeine (mg)'] <= caffeine_threshold; });
                    createCircles(filtered_data);
                } else {
                    filtered_data =  data.filter((d) => {return d['Beverage_prep'].includes(prepKey) && d['Caffeine (mg)'] <= caffeine_threshold; });
                    createCircles(filtered_data);
                }
            }
            
            function createCircles(data) {
                circles = chartArea.selectAll("circle.point").data(data)
                            .join(enter => enter.append("circle")
                                                .attr("class","point")
                                                .attr("opacity", 1)
                                            )
                            .attr("cx", d => sugarScale(d['Sugars (g)']))
                            .attr("cy", d => calorieScale(d['Calories']))
                            .attr("r", d => 6)
                            .attr("fill", d => categoryScale(d["Beverage_category"]) ) 
                            .attr("label", d => d["Beverage"])
                            .attr("genre", d => d["Beverage_category"]);

                circles.on("mouseover", function(event, d) {
                    d3.select(this)
                    .transition().duration(200)
                    .attr("stroke","white")
                    .attr("stroke-width", 4)
                    .style("cursor", "pointer");
                });

                circles.on("click", function(event, d) {
                    let clicked = document.getElementsByClassName('clicked');
                    for (let click of clicked) {
                        click.classList.remove('clicked')
                    }
                    d3.select(this)
                    .attr("class", "clicked");

                    if (d3.select("#panel")._groups.length >=1) {
                        updatePanel( {} );
                        updatePanel(d);
                    } else {
                        updatePanel(d);
                    }
                });

                circles.on("mouseout", function(event, d) {
                    d3.select(this)
                        .transition().duration(200)
                        .attr("stroke","")
                        .attr("stroke-width", 1);
                });
            }

            let legend = d3.select("div#legend");
            legend = legend.selectAll("div.row")
                    .data(categoryScale.domain())
                    .enter()
                    .append("div")
                    .style("padding", 8)
                    .attr("class", "each_legend");

            legend.append("svg").attr("width", 20).attr("height", 20)
                .append("rect")
                .attr("width", 16)
                .attr("height", 16)
                .attr('x', 0)
                .attr('y', 3)
                .attr("fill", categoryScale);

            legend.append("text")
                .text(function (d) { return d });


        d3.select("#myRange").on("input", function(){
            d3.select("#textInput").text(this.value + " mg")
            updateCirclesAnimated(selected_prep, this.value);
        })

        d3.select("#clear_button").on("click", function(){
            createCircles(data);
            updatePanel( {} );
            document.getElementById("myRange").value = "410";
            d3.select("#textInput").text("410 mg")

            let clicked = document.getElementsByClassName('clicked');
            for (let click of clicked) {
                click.classList.remove('clicked')
            }
        })


        }
        loadScatter();
    </script>
    
</body>
</html>